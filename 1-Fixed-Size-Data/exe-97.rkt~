;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-reader.ss" "lang")((modname exe-97) (read-case-sensitive #t) (teachpacks ((lib "image.rkt" "teachpack" "2htdp"))) (htdp-settings #(#t constructor repeating-decimal #f #t none #f ((lib "image.rkt" "teachpack" "2htdp")) #f)))
(require 2htdp/universe)

; A UFO is a Posn.
; interpretation (make-posn x y) is the UFO's location
; (using the top-down, left-to-right convention)

(define-struct tank [loc vel])
; A Tank is a structure:
; (make-tank Number Number).
; interpretation (make-tank x dx) specifies the position:
; (x, HEIGHT) and the tank's speed: dx pixels/tick

; A Missile is a Posn.
; interpretation (make-posn x y) is the missile's place

(define HEIGHT 200)
(define CANVAS (empty-scene HEIGHT HEIGHT))

(define UFO-HEIGHT 10)
(define UFO-WIDTH (* 2 UFO-HEIGHT))
(define UFO-IMAGE (overlay
                   (circle (/ UFO-HEIGHT 2) "solid" "palegreen")
                   (ellipse UFO-WIDTH (/ UFO-HEIGHT 2) "solid" "green")))
(define UFO-SPEED 2)
(define UFO-JUMP-MAX 10)

(define TANK-HEIGHT 8)
(define TANK-WIDTH (* 2 TANK-HEIGHT))
(define TANK-Y (- HEIGHT (/ TANK-HEIGHT 2)))
(define TANK-IMAGE (rectangle TANK-WIDTH TANK-HEIGHT "solid" "midnightblue"))
(define TANK-SPEED 10)

(define MISSILE-IMAGE (triangle 5 "solid" "black"))
(define MISSILE-SPEED 2)


; A SIGS is one of:
; -- (make-aim UFO Tank)
; -- (make-fired UFO Tank Missile)
; interpretation represents the complete state of a
; space invader game
; first instance (make-aim UFO Tank) is when before tank is fire missile
; second instance  (make-fired UFO Tank Missile) is when tank fire and generate missile
(define-struct aim [ufo tank])
(define-struct fired [ufo tank missile])

  ; SIGS -> Image
  ; adds TANK, UFO, and possibly MISSILE to
  ; the BACKGROUND scene
  (define (si-render s)
    (cond
      [(aim? s) (tank-render (aim-tank s)
                  (ufo-render (aim-ufo s) CANVAS))]
      [(fired? s) (missile-render (fired-missile s) (tank-render (fired-tank s)
                  (ufo-render (fired-ufo s) CANVAS)))]))

(check-expect (si-render (make-aim
  (make-posn 10 20)
  (make-tank 28 -3)))
              (place-image TANK-IMAGE 28 TANK-Y (place-image UFO-IMAGE 10 20 CANVAS)))

(check-expect (si-render
               (make-fired
  (make-posn 20 100)
  (make-tank 100 3)
  (make-posn 22 103)))
              (place-image MISSILE-IMAGE 22 103 (place-image TANK-IMAGE 100 TANK-Y (place-image UFO-IMAGE 20 100 CANVAS))))

(check-expect (si-render
               (make-fired
  (make-posn 10 20)
  (make-tank 28 -3)
  (make-posn 32 (- HEIGHT TANK-HEIGHT 10))))
              (place-image MISSILE-IMAGE 32 (- HEIGHT TANK-HEIGHT 10) (place-image TANK-IMAGE 28 TANK-Y (place-image UFO-IMAGE 10 20 CANVAS))))


; Tank Image -> Image 
; adds t to the given image im
(define (tank-render t im)
  (place-image TANK-IMAGE (tank-loc t) TANK-Y im))
 
; UFO Image -> Image 
; adds u to the given image im
(define (ufo-render u im)
  (place-image UFO-IMAGE (posn-x u) (posn-y u) im))


; missile Image -> Image 
; adds m to the given image im
(define (missile-render m im)
  (place-image MISSILE-IMAGE (posn-x m) (posn-y m) im))

(define s (make-fired
  (make-posn 20 100)
  (make-tank 100 3)
  (make-posn 22 103)))

(define x1 (tank-render
  (fired-tank s)
  (ufo-render (fired-ufo s)
              (missile-render (fired-missile s)
                              CANVAS))))

(define x2 (ufo-render
  (fired-ufo s)
  (tank-render (fired-tank s)
               (missile-render (fired-missile s)
                               CANVAS))))
(check-expect x1 x2)

